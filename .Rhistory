mean(MU284$RMT85)
mean(MU284$RMT85)
mean(sample.1$RMT85)/mean(MU284$RMT85)
mean(sample.2$RMT85)/mean(MU284$RMT85)
mean(sample.3$RMT85)/mean(MU284$RMT85)
mean(sample.4$RMT85)/mean(MU284$RMT85)
N <- nrow(MU284)
N
n <- 20
k <- ceiling(N/n) # set the interval
k
r <- sample(k, 1) # select the first sample
r
sample <- seq(r, by = k, length = n) # select every kth item
sample
sample <- seq(r, by = k, length = (n-1)) # select every kth item
sample
sample.2 <- MU284[sample, ]
sample.2[c(1, 10)] # only display the 1st and 10th columns for brevity
# Show the frequencies for each region (REG).
table(sample.2$REG)
# Show the percentages of these with respect to the entire dataset.
options(digits = 4)
data <- factor(sample.2$REG, levels = unique(MU284$REG)) # get only the unique items
table(data)/table(MU284$REG) # with respect to entire dataset
# Mean of RMT85 variable for this sample
mean(sample.2$RMT85)
N <- nrow(belgianmunicipalities)
data("belgianmunicipalities")
N <- nrow(belgianmunicipalities)
N
n <- 15
k <- ceiling(N / n)
k
r <- sample(k, 1)
r
s <- seq(r, by = k, length = n)
s
N <- nrow(MU284)
N
n <- 20
k <- ceiling(N / n) # set the interval
k
r <- sample(k, 1) # select the first sample
r
sample <- seq(r, by = k, length = n) # select every kth item
sample
N <- nrow(MU284)
N
n <- 20
k <- ceiling(N / n) # set the interval
k
r <- sample(k, 1) # select the first sample
r
sample <- seq(r, by = k, length = n) # select every kth item
sample
sample.2 <- MU284[sample, ]
sample.2[c(1, 10)] # only display the 1st and 10th columns for brevity
k <- floor(N / n) # set the interval
r <- sample(k, 1) # select the first sample
sample <- seq(r, by = k, length = n) # select every kth item
sample.2 <- MU284[sample, ]
sample.2[c(1, 10)] # only display the 1st and 10th columns for brevity
# Show the frequencies for each region (REG).
table(sample.2$REG)
# Show the percentages of these with respect to the entire dataset.
options(digits = 4)
data <- factor(sample.2$REG, levels = unique(MU284$REG)) # get only the unique items
table(data)/table(MU284$REG) # with respect to entire dataset
# Mean of RMT85 variable for this sample
mean(sample.2$RMT85)
cat("Mean of entire data set", mean(MU284$RMT85))
cat("Mean of entire data set - ", mean(MU284$RMT85))
cat("Mean of Simple Random W/R - ", mean(sample.1$RMT85))
cat("Mean of Systematic Sampling - ", mean(sample.2$RMT85))
cat("Mean of Unequal Systematic Sampling - ", mean(sample.3$RMT85))
cat("Mean of Stratifed Sanpling - ", mean(sample.4$RMT85))
cat("Mean of entire data set - ", mean(MU284$RMT85))
cat("Mean of Simple Random W/R - ", mean(sample.1$RMT85))
cat("Mean of Systematic Sampling - ", mean(sample.2$RMT85))
cat("Mean of Unequal Systematic Sampling - ", mean(sample.3$RMT85))
cat("Mean of Stratifed Sanpling - ", mean(sample.4$RMT85))
# (d)	Order the data using the REG variable.
order.index <- order(MU284$REG)
# Draw a stratified sample using proportional sizes based on the REG variable.
data <- MU284[order.index, ]
freq <- table(MU284$REG)
# determine how many from each stratum will be selected.
sizes <- round(20 * freq / sum(freq))
sizes
sum(sizes)
# select samples from each stratum.
st <- strata(data, stratanames = c("REG"), size = sizes, method = "srswor")
sample.4 <- getdata(data, st)
sample.4
sample.4[c(1, 10)] # only display the 1st, 7th and 10th columns for brevity
sample.4[c(1, 11)] # only display the 1st, 7th and 10th columns for brevity
sample.4[c(1, 11)] # only display the 1st, 11th columns for brevity
# Show the frequencies for each region (REG).
table(sample.4$REG)
# Show the percentages of these with respect to the entire dataset.
options(digits = 4)
clean.data <- factor(sample.4$REG, levels = unique(MU284$REG)) # get only the unique items
table(clean.data)/table(MU284$REG)
# Input data is sequence from 1 to 20
data <- c(1:20)
# Input data is sequence from 1 to 20
data <- c(1:20)
options(digits=4)
for (sample.size in c(1, 2, 5)) {  # loop through the 3 sample sizes
samples <- combn(data,sample.size) # For each sample size, obtain all samples
xbar <- apply(samples, 2, FUN = mean) # Find xbar
hist(xbar, prob = TRUE, main = paste("Sample Size =", sample.size), xlim = c(0, 20)) # Plot the histograms
cat("Sample Size = ", sample.size, " Mean = ", mean(xbar)," SD = ", sd(xbar), "\n")  # Compare the means and standard deviations
}
par(mfrow = c(1,3)) #Plot all 3 histograms in 1 row
# File with number of queries Google has had each day for one year period
queries <- read.csv("http://kalathur.com/cs544/data/queries.csv")
par(mfrow = c(1,1))  # Go back to 1 plot per frame
#(a) Histogram of the distribution of the number of queries.
hist(queries$queries/1000000, xlab = "Number of queries in millions", ylim = c(0, 50), main="Histogram of Queries") # I divide by 1000000 to make the x-axis more readable
# Compute the mean and standard deviations of the number of queries Google has had by day
mean(queries$queries)
sd(queries$queries)
# (b) Draw 1000 samples of this data of size 5
options(digits=4)
samples <- 1000
sample.size <- 5
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(queries$queries, sample.size)
xbar[i] <- mean(x)
}
# Show histogram of the densities of the sample means
hist(xbar/1000000, prob=TRUE, main="Histogram of Densities of Sample Means (Sample Size = 5)", xlab = "Sample Means (in millions)", ylim=c(0, 0.03))
# Compute the mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
# (c) Draw 1000 samples of this data of size 20
options(digits=4)
samples <- 1000
sample.size <- 20
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(queries$queries, sample.size)
xbar[i] <- mean(x)
}
# Show histogram of the densities of the sample means
hist(xbar/1000000, prob=TRUE, main="Histogram of Densities of Sample Means (Sample Size = 20)", xlab = "Sample Means (in millions)", ylim=c(0, 0.06))
# Compute the mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
r = 5
p = 0.5
# (a) Generate 1000 random numbers from this distribution.
samples <- rnbinom(1000, size = r, prob = p)
mean(samples)
sd(samples)
# Show the barplot with the proportions of the distinct values of this distribution
y <- table(samples)  # we find the proportions
barplot(prop.table(y), main = "Barplot of Distribution of 1000 Random Numbers - Negative Binomial (size = 0.5, prob = 0.5)", ylab = "Proportions", xlab = "Random Numbers", ylim = c(0, 0.16))
par(mfrow = c(2,2)) #To plot the 4 histograms in 2 rows
samples = 5000
for (sample.size in c(10, 20, 30, 40)) {  # iterate through the sample sizes
for (i in 1:samples) { #iterate through the number of samples
z <- rnbinom(sample.size, size = r, prob = p) # generate the sample random numbers using the negative binomial distribution
xbar[i] <- mean(z) # obtain the sample mean
}
hist(xbar, prob = TRUE, main = paste("Sample Size =", sample.size), xlim=c(0, 10), ylim = c(0, 1))
cat("Sample Size = ", sample.size, " Mean = ", mean(xbar),
" SD = ", sd(xbar), "\n")
}
library(sampling)
data("MU284")
# (a) Draw sample using simple random sampling without replacement.
sample <- srswor(20, nrow(MU284))
sample # show the sample
# Show frequencies for each region (REG).
sample.1 <- MU284[sample != 0, ]
table(sample.1$REG)
# Show percentages of these with respect to entire dataset
data <- factor(sample.1$REG, levels = unique(MU284$REG)) # get only the unique items
table(data)/table(MU284$REG)
# Mean of RMT85 variable for this sample
mean(sample.1$RMT85)
N <- nrow(MU284)
n <- 20
k <- floor(N / n) # set the interval, used floor() to avoid NA due to large sample size
r <- sample(k, 1) # select the first sample
sample <- seq(r, by = k, length = n) # select every kth item
sample.2 <- MU284[sample, ]
sample.2[c(1, 10)] # only display the 1st and 10th columns for brevity
# Show the frequencies for each region (REG).
table(sample.2$REG)
# Show the percentages of these with respect to the entire dataset.
options(digits = 4)
data <- factor(sample.2$REG, levels = unique(MU284$REG)) # get only the unique items
table(data)/table(MU284$REG) # with respect to entire dataset
# Mean of RMT85 variable for this sample
mean(sample.2$RMT85)
pik <- inclusionprobabilities(MU284$S82, 20)
# Using these values, show the sample drawn using systematic sampling.
sample <- UPsystematic(pik)
sample.3 <- MU284[sample != 0, ]
sample.3[c(1, 7, 10)] # only display the 1st, 7th and 10th columns for brevity
# Show frequencies for each region (REG).
sample.3 <- MU284[sample != 0, ]
table(sample.3$REG)
# Show percentages of these with respect to entire dataset
options(digits = 4)
data <- factor(sample.3$REG, levels = unique(MU284$REG)) # get only the unique items
table(data)/table(MU284$REG)
# Mean of RMT85 variable for this sample
mean(sample.3$RMT85)
# (d)	Order the data using the REG variable.
order.index <- order(MU284$REG)
# Draw a stratified sample using proportional sizes based on the REG variable.
data <- MU284[order.index, ]
freq <- table(MU284$REG)
# determine how many from each stratum will be selected.
sizes <- round(20 * freq / sum(freq))
sizes
sum(sizes)
# select samples from each stratum.
st <- strata(data, stratanames = c("REG"), size = sizes, method = "srswor")
sample.4 <- getdata(data, st)
sample.4[c(1, 11)] # only display the 1st, 11th columns for brevity
# Show the frequencies for each region (REG).
table(sample.4$REG)
# Show the percentages of these with respect to the entire dataset.
options(digits = 4)
clean.data <- factor(sample.4$REG, levels = unique(MU284$REG)) # get only the unique items
table(clean.data)/table(MU284$REG)
# Mean of RMT85 variable for this sample
mean(sample.4$RMT85)
cat("Mean of entire data set - ", mean(MU284$RMT85))
cat("Mean of Simple Random Wo/R - ", mean(sample.1$RMT85))
cat("Mean of Systematic Sampling - ", mean(sample.2$RMT85))
cat("Mean of Unequal Systematic Sampling - ", mean(sample.3$RMT85))
cat("Mean of Stratified Sampling - ", mean(sample.4$RMT85))
# Import and prepare the data set
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
# Import and prepare the data set
setwd("/")
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
getwd()
# Import and prepare the data set
getwd()
setwd("~/OneDrive - Self Employed/MBP Files/BU/CS 544/CSFinal_Lucas")
# Import and prepare the data set
dataset <- read.csv("https://github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
head(dataset)
getwd()
# Import and prepare the data set
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
head(dataset)
names(dataset)
library(RCurl)
library(curl)
install.packages("RCurl")
library(RCurl)
file <- getURL("https://github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
dataset2 <- read.csv(text = file)
names(dataset2)
library(RCurl)
file <- getURL("https://raw.github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
dataset2 <- read.csv(text = file)
names(dataset2)
install.packages("curl")
library(curl)
file <- curl("https://raw.github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
dataset2 <- read.csv(file)
names(dataset2)
library(curl)
file <- curl("http://github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
dataset2 <- read.csv(file)
names(dataset2)
install.packages("rio")
library(rio)
dataset3 <- import("http://github.com/marymlucas/cs544finalproject/blob/master/Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset3)
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Processing the data
dataset <- dataset["Date"]
dataset
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Processing the data
dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA", ]
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Processing the data
dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA"]
dataset
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Processing the data
dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA"]
dataset
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Processing the data
#dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA"]
dataset["Sex"]
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
nrow(dataset)
# Processing the data
#dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA"]
dataset["Sex"]
# Processing the data
#dataset <- dataset["Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA"]
dataset["Date", "Sex"]
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
nrow(dataset)
# Processing the data
dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
names(dataset)
data(iris)
names(iris)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex")]
names(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Race")]
names(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Race")]
names(dataset)
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
# Ensure the dataset is in the current working directory
dataset <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
names(dataset)
nrow(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Age")]
names(dataset)
head(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Race", "Age")]
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Age", "Resident.City")]
head(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Age", "Death.City")]
head(dataset)
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Age", "Location")]
# Processing the data
#dataset <- dataset[, c("Date", "Sex", "Race", "Age", "Resident.City", "Death.City", "Location", "ImmediateCauseA")]
dataset <- dataset[, c("Date", "Sex", "Age", "InjuryPlace")]
# Ensure we're in the current working directory and import the dataset
setwd("/Users/mary/Downloads")
raw.dataframe <- read.csv("Accidental_Drug_Related_Deaths__2012-June_2017.csv")
# Inspect the dataframe
str(raw.dataframe)
summary(raw.dataframe)
names(raw.dataframe)
nrow(raw.dataframe)
ncol(raw.dataframe)
# Subset the data to get only the columns I want to use
dataframe <- raw.dataframe[, c("Date", "Sex", "Race", "Age", "Death.City", "Location", "InjuryPlace", "ImmediateCauseA", "EtOH")]
summary(dataframe)
# Filter out any rows that have Age, Sex, or Race fields blank
dataframe <- dataframe[dataframe$Age != "" & dataframe$Sex != "" & dataframe$Race != "" & dataframe$Date != "",]
summary(dataframe)
# Dimensions of processed dataframe
nrow(dataframe)
ncol(dataframe)
# In the EtOH column, replace all 'y' with 'Y' so they're not counted as separate values
dataframe$EtOH[which(dataframe$EtOH == "y")] = "Y"
summary(dataframe)
# Create two new columns from Date variable for month and year
dates <- do.call('rbind', strsplit(as.character(dataframe$Date),'/',fixed=TRUE))
dataframe$Month <- dates[, 1]
dataframe$Year <- dates[, 3]
summary(dataframe)
nrow(dataframe)
ncol(dataframe)
f <- fivenum(dataframe$Age)  # five number summary of the Age variable
f
# Outliers for the Age variable
# Calculate the lower and upper ends of the outlier
c(f[2] - 1.5 * IQR(f), f[4] + 1.5 * IQR(f))
# What are the outliers in the data
dataframe$Age[dataframe$Age < (f[2] - 1.5 * IQR(f))] # numbers less than the lower end
dataframe$Age[dataframe$Age > (f[4] + 1.5 * IQR(f))] # numbers greater than the upper end
# Stem plot for the Age variable
stem(dataframe$Age)
# Frequency and histogram for the age variable
table(dataframe$Age)
hist(dataframe$Age,  xlab = "Age", ylab = "Drug-Related Deaths", main = "Drug-Related Deaths by Age")
boxplot(dataframe$Age, horizontal = TRUE, col = "green", xlab = "", xaxt = "n", main = "Drug-Related Deaths by Age")
axis(side = 1, at = fivenum(dataframe$Age), labels =  TRUE, las = 2)
text(fivenum(dataframe$Age), rep(1.2, 5), srt = 90, adj = 0, labels = c("Min", "Lower Hinge", "Median", "Upper Hinge", "Max"))
table(dataframe$Race)
prop.table(table(dataframe$Race))
byRace = sort(table(dataframe$Race), decreasing = TRUE) # we now sort to obtain the top 3
byRace  # display the data
prop.table(byRace)[1:3]
pie(prop.table(byRace)[1:3], col=rainbow(3), main = "Drug-Related Deaths by Race")
# Trend in Drug-Related Deaths by month of the year
table(dataframe$Month)
barplot(table(dataframe$Month), main="Drug-Related Deaths by Month of the Year", ylab = "Frequency", xlab = "Months", ylim = c(0, 350))
# Trend in Drug-Related Deaths over time
table(dataframe$Year)
plot(table(dataframe$Year), main="Drug-Related Deaths Over Time", ylab = "Frequency", xlab = "Years", ylim = c(0,1000), type = 'o', col="blue")
# Distribution of the Age Variable
table(dataframe$Age)
barplot(table(dataframe$Age),  xlab = "Age", ylab = "Deaths", main = "Drug-Related Deaths by Age", ylim=c(0, 120))
mean(dataframe$Age)
median(dataframe$Age)
sd(dataframe$Age)
# To plot the probability density function of this distribution
mu <- mean(dataframe$Age)
sigma <- sd(dataframe$Age)
x <- seq(mu - 3*sigma, mu + 3*sigma) # sequence of value spanning 3 standard deviations either side of the mean
pdf <- dnorm(x, mean = mu, sd = sigma)  # we get the pdf values
plot(x, pdf, type = "l", col = "blue", xlab = "Age", ylab = "PDF", main = "Probality Density Function")
# Within 1 standard deviation:
pnorm(mu + sigma, mean = mu, sd = sigma) - pnorm(mu - sigma, mean = mu, sd = sigma)
# Within 2 standard deviations:
pnorm(mu + 2*sigma, mean = mu, sd = sigma) - pnorm(mu - 2*sigma, mean = mu, sd = sigma)
# Within 3 standard deviations:
pnorm(mu + 3*sigma, mean = mu, sd = sigma) - pnorm(mu - 3*sigma, mean = mu, sd = sigma)
# Central Limit Theorem
# 1000 samples of size 10
options(digits=4)
samples <- 1000
sample.size <- 10
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(dataframe$Age, sample.size)
xbar[i] <- mean(x)
}
# Histogram of the densities of the sample means
hist(xbar, prob=TRUE, main="Densities of Sample Means (Sample Size = 10)", xlab = "Sample Means")
# The mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
# 1000 samples of size 20 - histogram of the densities of the sample means.
options(digits=4)
samples <- 1000
sample.size <- 20
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(dataframe$Age, sample.size)
xbar[i] <- mean(x)
}
# Histogram of the densities of the sample means
hist(xbar, prob=TRUE, main="Densities of Sample Means (Sample Size = 20)", xlab = "Sample Means")
# The mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
# 1000 samples of size 30 - histogram of the densities of the sample means.
options(digits=4)
samples <- 1000
sample.size <- 30
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(dataframe$Age, sample.size)
xbar[i] <- mean(x)
}
# Histogram of the densities of the sample means
hist(xbar, prob=TRUE, main="Densities of Sample Means (Sample Size = 30)", xlab = "Sample Means")
# The mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
# 1000 samples of size 40 - histogram of the densities of the sample means.
options(digits=4)
samples <- 1000
sample.size <- 40
xbar <- numeric(samples)
for (i in 1: samples) {
x <- sample(dataframe$Age, sample.size)
xbar[i] <- mean(x)
}
# Histogram of the densities of the sample means
hist(xbar, prob=TRUE, main="Densities of Sample Means (Sample Size = 40)", xlab = "Sample Means")
# The mean of the sample means and the standard deviation of the sample means
mean(xbar)
sd(xbar)
# Sampling Methods (using a sample size of 20)
library(sampling)
samplesize = 20
sample <- srswor(samplesize, nrow(dataframe))
sample.1 <- dataframe[sample != 0, ]
sample.1[c("Sex", "Race", "Age", "Month", "Year")] # for brevity
table(sample.1$Year)
# Mean of Age variable for this sample
mean(sample.1$Age)
N <- nrow(dataframe)
n <- samplesize
